'use strict';
const nodePromise = require('node-promise');
const redis = require('node-redis');
//const client = redis.createClient(process.env.REDIS_URI);

// For setting/getting and publishing
const store = redis.createClient();

// For listening to messages
const listener = redis.createClient();

// Handle subscriptions
const subscriptions = {};
listener.on('message', (channel, message) => {
  console.log(`got message ${message} on ${channel} channel`);
  const json = JSON.parse(message);
  var fn = subscriptions[channel];
  fn && fn(json);
  //const callbacks = subscriptions[channel] || [];
  //callbacks.forEach(fn => fn(json));
});

module.exports = {
  set: set,
  get: get,
  publish,
  subscribe,
  unsubscribe
};

function set(key, data) {
  return nodePromise(cb => store.set(key, JSON.stringify(data), cb));
}

function get(key, data) {
  return nodePromise(cb => store.get(key, cb))
    .then(data => JSON.parse(data));
}

function publish(channel, data) {
  console.log(`publishing to ${channel} channel with ${subscriptions[channel].length} listeners`);
  store.publish(channel, JSON.stringify(data));
}

function subscribe(channel, fn) {
  //let list;
  //if (!subscriptions[channel]) {
  //  list = subscriptions[channel] = [];
  //}
  //list.push(fn);
  subscriptions[channel] = fn;
  listener.subscribe(channel);
}

function unsubscribe(channel) {
  delete subscriptions[channel];
  listener.unsubscribe(channel);
  //const list = subscriptions[channel] || [];
  //const idx = list.findIndex(n => n === fn);
  //list.splice(idx, 1);
}