'use strict';
const https  = require('https'),
      assert = require('assert'),
      log    = require('log');

const API_KEY = process.env.GOOGLE_API_KEY;
const mapsApi = 'https://maps.googleapis.com/maps/api/geocode/json?latlng=';

module.exports = lookupName;

function lookupLocation(coords) {
  return new Promise(resolve => {
    // Check for invalid values
    const coordsExists = coords && coords.latitude && coords.longitude;
    assert(coordsExists, '`coords` object must have latitude and longitude properties');

    const inRange = Math.abs(coords.latitude) <= 90 && Math.abs(coords.longitude) <= 180;
    assert(inRange, 'latitude must be between -90 to 90, longitude between -180 and 180');

    const latlng = coords.latitude + ',' + coords.longitude;

    https.get(`${mapsApi}${latlng}&key=${API_KEY}`, res => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => resolve(JSON.parse(data)));
    });
  });
}

function lookupName(position) {
  return lookupLocation(position).then(getName);
}

function getName(res) {
  console.log('\n\n\n', JSON.stringify(res,null,2), '\n\n\n');
  try {
    let place = 'unknown';
    let i = 0;
    while (i < res.results.length && place === 'unknown') {
      place = getPlace(res.results[i].address_components);
      i++;
    }
    return place;
  } catch (e) {
    console.log(e.stack);
    return 'unknown';
  }
}

function getPlace(components) {
  let hood, state;
  for (var i = 0; i < components.length; i++) {
    if (hood && state) return hood.short_name + ', ' + state.short_name;
    for (var j = 0; j < components[i].types.length; j++) {
      if (components[i].types[j] === 'neighborhood') {
        hood = components[i];
      } else if (components[i].types[j] === 'administrative_area_level_1') {
        state = components[i];
      }
    }
  }
  return 'unknown';
}