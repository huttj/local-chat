"use strict";
const uuid         = require('uuid'),
      assert       = require('assert'),
      User         = require('models/user'),
      crypto       = require('shared-crypto'),
      redis        = require('shared-redis'),
      _            = require('lodash'),
      authenticate = require('authenticate'),
      attachEvents = require('attach-events');

const Auth = {};

Auth.ping = function(payload) {
  this.emit('ping', 'pong');
};

Auth.authenticate = function(payload) {
  if (!payload || !payload.userId || !payload.sessionKey) {
    return this.emit('not authenticated', 'userId or sessionKey missing');
  }
  authenticate(payload.userId, payload.sessionKey)
    .then(res => this.emit('authenticated', res))
    .catch(res => this.emit('not authenticated', res));
};

Auth.register = function(payload) {
  if (!payload || !payload.username || !payload.password) {
    return this.emit('register failed', 'You must provide a username or password');
  }

  createUserObject(payload.username, payload.password)
    .then(user => User.create(user))
    .then(logInUser.bind(this, 'Username in use'))
    .catch(err => this.emit('register failed', err.message));

  function createUserObject(username, password) {
    const salt = uuid.v4();
    return crypto.hash(password, salt)
      .then(hash => ({ username, hash, salt }));
  }
};

Auth.login = function(payload) {
  if (!payload || !payload.username || !payload.password) {
    return this.emit('login failed', 'You must provide a username or password');
  }
  const noMatchMessage = 'Username or password not correct';

  const query = {
    where: {
      username: payload.username
    }
  };

  User.findOne(query)
    .then(checkHash)
    .then(logInUser.bind(this, noMatchMessage))
    .catch(err => this.emit('login failed', err.message));

  function checkHash(user) {
    crypto.hash(payload.password, user.salt)
      .then(hash => assert(hash === user.hash, noMatchMessage))
      .then(() => user);
  }
};

function logInUser(errMessage, user) {
  assert(user, errMessage);

  const sessionKey = uuid.v4();
  redis.set(user.id, sessionKey);

  const safeProps = 'id username phone'.split(' ');
  const res = _.merge({sessionKey}, _.pick(user.get(), safeProps));

  this.emit('login', res);
}

module.exports = attachEvents(Auth);